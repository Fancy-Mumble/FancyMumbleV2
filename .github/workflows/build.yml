name: "Build-Master-Branch"
on:
  push:
    branches:
      - master

env:
  app_name: Fancy Mumble
  RUSTFLAGS: "-Dwarnings"

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev
          version: 1.0

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: "Install tests"
        working-directory: src-tauri
        run: |
          rustup component add clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: "Run clippy"
        working-directory: src-tauri
        run: |
          cargo clippy --no-default-features --all-targets -- -W clippy::pedantic -W clippy::nursery -W clippy::unwrap_used -D warnings

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev
          version: 1.0

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: "Run tests"
        working-directory: src-tauri
        run: |
          cargo test --no-default-features

  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Fancy Mumble v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-app:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, windows-latest] # macos-latest is currently not working
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: awalsh128/cache-apt-pkgs-action@latest
        if: matrix.platform == 'ubuntu-20.04'
        with:
          packages: libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev
          version: 1.0

      - name: Install vcpkg (windows only)
        if: matrix.platform == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          vcpkgGitCommitId: "501db0f17ef6df184fcdbfbe0f87cde2313b6ab1"
          vcpkgGitUrl: "https://github.com/microsoft/vcpkg.git"
        env:
          VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed

      - name: workaround for nasm.us's potato pc (windows only)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Define URLs
          $urlToCheck = "https://nasm.us/"
          $fileToDownload = "http://mirrors.kodi.tv/build-deps/win32/nasm-2.12.02-win32.zip"

          # Define download location
          $downloadFolder = "D:\a\FancyMumbleV2\FancyMumbleV2\vcpkg\downloads"

          # Check if website is available
          try {
              $response = Invoke-WebRequest -Uri $urlToCheck -Method Head -ErrorAction Stop
              if ($response.StatusCode -ne 200) {
                  throw
              }
              Write-Host "$urlToCheck is available."
          }
          catch {
              Write-Host "$urlToCheck is not available. Downloading file..."

              # Create download folder if it doesn't exist
              if (!(Test-Path -Path $downloadFolder)) {
                  New-Item -ItemType Directory -Path $downloadFolder
              }

              # Download file
              $filePath = Join-Path -Path $downloadFolder -ChildPath (Split-Path -Path $fileToDownload -Leaf)
              Invoke-WebRequest -Uri $fileToDownload -OutFile $filePath

              Write-Host "File downloaded to $filePath."
          }

      - name: Install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          vcpkg install openssl:x64-windows
          vcpkg install openssl:x64-windows-static
          vcpkg integrate install

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "yarn"

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # Change this to npm, yarn or pnpm.

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: "Set environmental variables (Windows)"
        if: matrix.platform == 'windows-latest'
        run: |
          echo "OPENSSL_DIR=$env:VCPKG_ROOT\installed\x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Test if env is set correctly
        if: matrix.platform == 'windows-latest'
        run: |
          echo $env:OPENSSL_DIR

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version

      - name: Add Windows Executeable
        continue-on-error: true
        if: matrix.platform == 'windows-latest'
        run: |
          mv "src-tauri/target/release/${{env.app_name}}.exe" "${{env.app_name}}-${{matrix.platform}}-${{ github.ref_name }}.exe"

      - name: "Publish binary to release (windows)"
        continue-on-error: true
        if: matrix.platform == 'windows-latest'
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          file: "${{env.app_name}}-${{matrix.platform}}-${{ github.ref_name }}*"
          tags: false
          draft: false
          overwrite: false
          release_id: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-app]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
